name: datatask

services:
  db:
    container_name: datatask_database
    image: postgres:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - datatask_internal_network
    env_file:
      - ../../configs/.env.docker
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
    volumes:
      - datatask_postgres_volume:/var/lib/postgresql/data

#  migrate:
#    container_name: datatask_migrate
#    image: migrate/migrate:v4.16.2
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"
#        max-file: "3"
#    restart: no
#    depends_on:
#      db:
#        condition: service_healthy
#    volumes:
#      - ${PWD}/internal/repository/database/migrations:/migrations
#    entrypoint: sh -c 'migrate -path=/migrations -database=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_BASE}?sslmode=${DB_SSL} up'
#    networks:
#      - datatask_internal_network

  rabbitmq:
    container_name: datatask_rabbitmq
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ_PASS}
    networks:
      - datatask_internal_network

#  minio:
#    container_name: datatask_minio
#    image: minio/minio
#    environment:
#      - MINIO_ACCESS_KEY=${S3_USER}
#      - MINIO_SECRET_KEY=${S3_PASS}
#    ports:
#      - "${S3_PORT}:9000"
#      - "${S3_DASHBOARD_PORT}:9001"
#    networks:
#      - datatask_internal_network
#    volumes:
#      - datatask_minio_data:/data
#    command: server /data --console-address ":9001"
#    restart: unless-stopped
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 10

  prometheus:
    container_name: datatask_prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always
    image: prom/prometheus
    env_file:
      - ../../configs/.env.docker
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ../../infra/metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
    networks:
      - datatask_metrics_network

  grafana:
    container_name: datatask_grafana
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    image: grafana/grafana
    volumes:
      - datatask_grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    env_file:
      - ../../configs/.env.docker
    ports:
      - ${GF_PORT}:3000
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
    networks:
      - datatask_metrics_network

  backend:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile
      cache_from:
        - golang:1.23.6
    container_name: datatask_backend
    restart: always
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
    env_file:
      - ../../configs/.env.docker
    volumes:
      - ../../configs/.env.docker:/app/configs/.env.docker
      - ../../docs:/app/docs
    ports:
      - "${GIN_PORT}:8080"
    depends_on:
      - db
      - migrate
      - rabbitmq
      - minio
    networks:
      - datatask_internal_network
    develop:
      watch:
        - action: rebuild
          path: ../..
        - action: sync
          path: ../..
          target: /app


volumes:
  datatask_internal_data:
    name: datatask_internal_data

  datatask_postgres_volume:
    name: datatask_postgres_volume

  datatask_minio_data:
    name: datatask_minio_data

  datatask_grafana_data:
    name: datatask_grafana_data
  datatask_prometheus_data:
    name: datatask_prometheus_data

networks:
  datatask_internal_network:
    name: datatask_internal_network

  datatask_metrics_network:
    name: datatask_metrics_network